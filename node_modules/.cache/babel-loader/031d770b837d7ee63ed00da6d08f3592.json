{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { isPrimitive as s } from \"../directive-helpers.js\";\nimport { AsyncDirective as i } from \"../async-directive.js\";\nimport { PseudoWeakRef as e, Pauser as r } from \"./private-async-helpers.js\";\nimport { directive as o } from \"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst n = t => !s(t) && \"function\" == typeof t.then,\n  h = 1073741823;\nclass c extends i {\n  constructor() {\n    super(...arguments), this._$Cwt = h, this._$Cbt = [], this._$CK = new e(this), this._$CX = new r();\n  }\n  render(...s) {\n    return s.find(t => !n(t)) ?? t;\n  }\n  update(s, i) {\n    const e = this._$Cbt;\n    let r = e.length;\n    this._$Cbt = i;\n    const o = this._$CK,\n      c = this._$CX;\n    this.isConnected || this.disconnected();\n    for (let t = 0; t < i.length && !(t > this._$Cwt); t++) {\n      const s = i[t];\n      if (!n(s)) return this._$Cwt = t, s;\n      t < r && s === e[t] || (this._$Cwt = h, r = 0, Promise.resolve(s).then(async t => {\n        for (; c.get();) await c.get();\n        const i = o.deref();\n        if (void 0 !== i) {\n          const e = i._$Cbt.indexOf(s);\n          e > -1 && e < i._$Cwt && (i._$Cwt = e, i.setValue(t));\n        }\n      }));\n    }\n    return t;\n  }\n  disconnected() {\n    this._$CK.disconnect(), this._$CX.pause();\n  }\n  reconnected() {\n    this._$CK.reconnect(this), this._$CX.resume();\n  }\n}\nconst m = o(c);\nexport { c as UntilDirective, m as until };","map":{"version":3,"sources":["../src/directives/until.ts"],"names":["isPromise","x","isPrimitive","then","_infinity","UntilDirective","AsyncDirective","this","__lastRenderedIndex","__values","PseudoWeakRef","Pauser","args","find","noChange","_part","previousValues","previousLength","length","weakThis","__weakThis","pauser","__pauser","isConnected","disconnected","i","value","Promise","resolve","async","result","get","_this","deref","undefined","index","indexOf","setValue","disconnect","pause","reconnect","resume","until","directive"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"]},"metadata":{},"sourceType":"module"}