{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { isPrimitive as s } from \"../directive-helpers.js\";\nimport { AsyncDirective as i } from \"../async-directive.js\";\nimport { PseudoWeakRef as e, Pauser as r } from \"./private-async-helpers.js\";\nimport { directive as o } from \"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst n = t => !s(t) && \"function\" == typeof t.then,\n  h = 1073741823;\nclass c extends i {\n  constructor() {\n    super(...arguments), this._$Cwt = h, this._$Cbt = [], this._$CK = new e(this), this._$CX = new r();\n  }\n  render(...s) {\n    return s.find(t => !n(t)) ?? t;\n  }\n  update(s, i) {\n    const e = this._$Cbt;\n    let r = e.length;\n    this._$Cbt = i;\n    const o = this._$CK,\n      c = this._$CX;\n    this.isConnected || this.disconnected();\n    for (let t = 0; t < i.length && !(t > this._$Cwt); t++) {\n      const s = i[t];\n      if (!n(s)) return this._$Cwt = t, s;\n      t < r && s === e[t] || (this._$Cwt = h, r = 0, Promise.resolve(s).then(async t => {\n        for (; c.get();) await c.get();\n        const i = o.deref();\n        if (void 0 !== i) {\n          const e = i._$Cbt.indexOf(s);\n          e > -1 && e < i._$Cwt && (i._$Cwt = e, i.setValue(t));\n        }\n      }));\n    }\n    return t;\n  }\n  disconnected() {\n    this._$CK.disconnect(), this._$CX.pause();\n  }\n  reconnected() {\n    this._$CK.reconnect(this), this._$CX.resume();\n  }\n}\nconst m = o(c);\nexport { c as UntilDirective, m as until };","map":null,"metadata":{},"sourceType":"module"}