{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as e, Directive as r, PartType as s } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst n = \"important\",\n  i = \" !\" + n,\n  o = e(class extends r {\n    constructor(t) {\n      if (super(t), t.type !== s.ATTRIBUTE || \"style\" !== t.name || t.strings?.length > 2) throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\");\n    }\n    render(t) {\n      return Object.keys(t).reduce((e, r) => {\n        const s = t[r];\n        return null == s ? e : e + `${r = r.includes(\"-\") ? r : r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, \"-$&\").toLowerCase()}:${s};`;\n      }, \"\");\n    }\n    update(e, [r]) {\n      const {\n        style: s\n      } = e.element;\n      if (void 0 === this.ft) return this.ft = new Set(Object.keys(r)), this.render(r);\n      for (const t of this.ft) null == r[t] && (this.ft.delete(t), t.includes(\"-\") ? s.removeProperty(t) : s[t] = null);\n      for (const t in r) {\n        const e = r[t];\n        if (null != e) {\n          this.ft.add(t);\n          const r = \"string\" == typeof e && e.endsWith(i);\n          t.includes(\"-\") || r ? s.setProperty(t, r ? e.slice(0, -11) : e, r ? n : \"\") : s[t] = e;\n        }\n      }\n      return t;\n    }\n  });\nexport { o as styleMap };","map":{"version":3,"sources":["../src/directives/style-map.ts"],"names":["important","importantFlag","Directive","partInfo","super","type","PartType","ATTRIBUTE","name","strings","length","Error","styleInfo","Object","keys","reduce","style","prop","value","includes","replace","toLowerCase","part","element","this","_previousStyleProperties","undefined","Set","render","delete","removeProperty","add","isImportant","endsWith","setProperty","slice","noChange","styleMap","directive"],"mappings":";;;;;;;AA0BA,MAAMA,CAAAA,GAAY,WAAA;EAEZC,CAAAA,GAAgB,IAAA,GAAOD,CAAAA;EA8GhBqC,CAAAA,GAAWC,CAAAA,CA1GxB,cAAgCpC,CAAAA;IAG9B,WAAA,CAAYC,CAAAA,EAAAA;MAEV,IADAC,KAAAA,CAAMD,CAAAA,CAAAA,EAEJA,CAAAA,CAASE,IAAAA,KAASC,CAAAA,CAASC,SAAAA,IACT,OAAA,KAAlBJ,CAAAA,CAASK,IAAAA,IACRL,CAAAA,CAASM,OAAAA,EAASC,MAAAA,GAAoB,CAAA,EAEvC,MAAUC,KAAAA,CACR,4GAAA,CAIL;IAAA;IAED,MAAA,CAAOC,CAAAA,EAAAA;MACL,OAAOC,MAAAA,CAAOC,IAAAA,CAAKF,CAAAA,CAAAA,CAAWG,MAAAA,CAAO,CAACC,CAAAA,EAAOC,CAAAA,KAAAA;QAC3C,MAAMC,CAAAA,GAAQN,CAAAA,CAAUK,CAAAA,CAAAA;QACxB,OAAa,IAAA,IAATC,CAAAA,GACKF,CAAAA,GAcFA,CAAAA,GAAQ,GALfC,CAAAA,GAAOA,CAAAA,CAAKE,QAAAA,CAAS,GAAA,CAAA,GACjBF,CAAAA,GACAA,CAAAA,CACGG,OAAAA,CAAQ,mCAAA,EAAqC,KAAA,CAAA,CAC7CC,WAAAA,CAAAA,CAAAA,IACmBH,CAAAA,GAAQ;MAAA,CAAA,EACjC,EAAA,CACJ;IAAA;IAEQ,MAAA,CAAOI,CAAAA,EAAAA,CAAsBV,CAAAA,CAAAA,EAAAA;MACpC,MAAA;QAAMI,KAAAA,EAACA;MAAAA,CAAAA,GAASM,CAAAA,CAAKC,OAAAA;MAErB,IAAA,KAAsCG,CAAAA,KAAlCF,IAAAA,CAAKC,EAAAA,EAEP,OADAD,IAAAA,CAAKC,EAAAA,GAA2B,IAAIE,GAAAA,CAAId,MAAAA,CAAOC,IAAAA,CAAKF,CAAAA,CAAAA,CAAAA,EAC7CY,IAAAA,CAAKI,MAAAA,CAAOhB,CAAAA,CAAAA;MAIrB,KAAK,MAAMJ,CAAAA,IAAQgB,IAAAA,CAAKC,EAAAA,EAEC,IAAA,IAAnBb,CAAAA,CAAUJ,CAAAA,CAAAA,KACZgB,IAAAA,CAAKC,EAAAA,CAA0BI,MAAAA,CAAOrB,CAAAA,CAAAA,EAClCA,CAAAA,CAAKW,QAAAA,CAAS,GAAA,CAAA,GAChBH,CAAAA,CAAMc,cAAAA,CAAetB,CAAAA,CAAAA,GAGpBQ,CAAAA,CAAcR,CAAAA,CAAAA,GAAQ,IAAA,CAAA;MAM7B,KAAK,MAAMA,CAAAA,IAAQI,CAAAA,EAAW;QAC5B,MAAMM,CAAAA,GAAQN,CAAAA,CAAUJ,CAAAA,CAAAA;QACxB,IAAa,IAAA,IAATU,CAAAA,EAAe;UACjBM,IAAAA,CAAKC,EAAAA,CAAyBM,GAAAA,CAAIvB,CAAAA,CAAAA;UAClC,MAAMwB,CAAAA,GACa,QAAA,IAAA,OAAVd,CAAAA,IAAsBA,CAAAA,CAAMe,QAAAA,CAAShC,CAAAA,CAAAA;UAC1CO,CAAAA,CAAKW,QAAAA,CAAS,GAAA,CAAA,IAAQa,CAAAA,GACxBhB,CAAAA,CAAMkB,WAAAA,CACJ1B,CAAAA,EACAwB,CAAAA,GACKd,CAAAA,CAAiBiB,KAAAA,CAAM,CAAA,EAAA,CA1EvB,EAAA,CAAA,GA2EAjB,CAAAA,EACLc,CAAAA,GAAchC,CAAAA,GAAY,EAAA,CAAA,GAI3BgB,CAAAA,CAAcR,CAAAA,CAAAA,GAAQU,CAE1B;QAAA;MACF;MACD,OAAOkB,CACR;IAAA;EAAA,CAAA,CAAA;AAAA,SAAA,CAAA,IAAA,QAAA","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  [name: string]: string | number | undefined | null;\n}\n\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\n\nclass StyleMapDirective extends Directive {\n  private _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.',\n      );\n    }\n  }\n\n  render(styleInfo: Readonly<StyleInfo>) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-')\n        ? prop\n        : prop\n            .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n            .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set(Object.keys(styleInfo));\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    for (const name of this._previousStyleProperties) {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = null;\n        }\n      }\n    }\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant =\n          typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(\n            name,\n            isImportant\n              ? (value as string).slice(0, flagTrim)\n              : (value as string),\n            isImportant ? important : '',\n          );\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n"]},"metadata":{},"sourceType":"module"}