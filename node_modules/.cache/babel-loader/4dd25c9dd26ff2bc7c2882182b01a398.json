{"ast":null,"code":"\"use strict\";\n\nvar c = Object.defineProperty;\nvar m = Object.getOwnPropertyDescriptor;\nvar t = (p, a, e, n) => {\n  for (var r = n > 1 ? void 0 : n ? m(a, e) : a, u = p.length - 1, h; u >= 0; u--) (h = p[u]) && (r = (n ? h(a, e, r) : h(r)) || r);\n  return n && r && c(a, e, r), r;\n};\nimport { html as s, nothing as o, SizedMixin as v } from \"@spectrum-web-components/base\";\nimport { ifDefined as l, live as y } from \"@spectrum-web-components/base/src/directives.js\";\nimport { property as i, query as b, state as d } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ManageHelpText as g } from \"@spectrum-web-components/help-text/src/manage-help-text.js\";\nimport { Focusable as f } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport $ from \"./textfield.css.js\";\nimport E from \"@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js\";\nconst S = [\"text\", \"url\", \"tel\", \"email\", \"password\"];\nexport class TextfieldBase extends g(v(f, {\n  noDefaultSize: !0\n})) {\n  constructor() {\n    super(...arguments);\n    this.allowedKeys = \"\";\n    this.focused = !1;\n    this.invalid = !1;\n    this.label = \"\";\n    this.placeholder = \"\";\n    this._type = \"text\";\n    this.grows = !1;\n    this.maxlength = -1;\n    this.minlength = -1;\n    this.multiline = !1;\n    this.readonly = !1;\n    this.rows = -1;\n    this.valid = !1;\n    this._value = \"\";\n    this.quiet = !1;\n    this.required = !1;\n  }\n  static get styles() {\n    return [$, E];\n  }\n  set type(e) {\n    const n = this._type;\n    this._type = e, this.requestUpdate(\"type\", n);\n  }\n  get type() {\n    var e;\n    return (e = S.find(n => n === this._type)) != null ? e : \"text\";\n  }\n  set value(e) {\n    if (e === this.value) return;\n    const n = this._value;\n    this._value = e, this.requestUpdate(\"value\", n);\n  }\n  get value() {\n    return this._value;\n  }\n  get focusElement() {\n    return this.inputElement;\n  }\n  setSelectionRange(e, n, r = \"none\") {\n    this.inputElement.setSelectionRange(e, n, r);\n  }\n  select() {\n    this.inputElement.select();\n  }\n  handleInput(e) {\n    if (this.allowedKeys && this.inputElement.value && !new RegExp(`^[${this.allowedKeys}]*$`, \"u\").test(this.inputElement.value)) {\n      const u = this.inputElement.selectionStart - 1;\n      this.inputElement.value = this.value.toString(), this.inputElement.setSelectionRange(u, u);\n      return;\n    }\n    this.value = this.inputElement.value;\n  }\n  handleChange() {\n    this.dispatchEvent(new Event(\"change\", {\n      bubbles: !0,\n      composed: !0\n    }));\n  }\n  onFocus() {\n    this.focused = !this.readonly && !0;\n  }\n  onBlur(e) {\n    this.focused = !this.readonly && !1;\n  }\n  handleInputElementPointerdown() {}\n  renderStateIcons() {\n    return this.invalid ? s`\n                <sp-icon-alert id=\"invalid\" class=\"icon\"></sp-icon-alert>\n            ` : this.valid ? s`\n                <sp-icon-checkmark100\n                    id=\"valid\"\n                    class=\"icon spectrum-UIIcon-Checkmark100\"\n                ></sp-icon-checkmark100>\n            ` : o;\n  }\n  get displayValue() {\n    return this.value.toString();\n  }\n  get renderMultiline() {\n    return s`\n            ${this.multiline && this.grows && this.rows === -1 ? s`\n                      <div id=\"sizer\" class=\"input\" aria-hidden=\"true\">${this.value}&#8203;\n                      </div>\n                  ` : o}\n            <!-- @ts-ignore -->\n            <textarea\n                name=${l(this.name || void 0)}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label || this.appliedLabel || this.placeholder}\n                aria-invalid=${l(this.invalid || void 0)}\n                class=\"input\"\n                maxlength=${l(this.maxlength > -1 ? this.maxlength : void 0)}\n                minlength=${l(this.minlength > -1 ? this.minlength : void 0)}\n                title=${this.invalid ? \"\" : o}\n                pattern=${l(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${this.displayValue}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                rows=${l(this.rows > -1 ? this.rows : void 0)}\n                autocomplete=${l(this.autocomplete)}\n            ></textarea>\n        `;\n  }\n  get renderInput() {\n    return s`\n            <!-- @ts-ignore -->\n            <input\n                name=${l(this.name || void 0)}\n                type=${this.type}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label || this.appliedLabel || this.placeholder}\n                aria-invalid=${l(this.invalid || void 0)}\n                class=\"input\"\n                title=${this.invalid ? \"\" : o}\n                maxlength=${l(this.maxlength > -1 ? this.maxlength : void 0)}\n                minlength=${l(this.minlength > -1 ? this.minlength : void 0)}\n                pattern=${l(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${y(this.displayValue)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @pointerdown=${this.handleInputElementPointerdown}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                autocomplete=${l(this.autocomplete)}\n            />\n        `;\n  }\n  renderField() {\n    return s`\n            ${this.renderStateIcons()}\n            ${this.multiline ? this.renderMultiline : this.renderInput}\n        `;\n  }\n  render() {\n    return s`\n            <div id=\"textfield\">${this.renderField()}</div>\n            ${this.renderHelpText(this.invalid)}\n        `;\n  }\n  update(e) {\n    (e.has(\"value\") || e.has(\"required\") && this.required) && this.updateComplete.then(() => {\n      this.checkValidity();\n    }), super.update(e);\n  }\n  checkValidity() {\n    let e = this.inputElement.checkValidity();\n    return (this.required || this.value && this.pattern) && ((this.disabled || this.multiline) && this.pattern && (e = new RegExp(`^${this.pattern}$`, \"u\").test(this.value.toString())), typeof this.minlength != \"undefined\" && (e = e && this.value.toString().length >= this.minlength), this.valid = e, this.invalid = !e), e;\n  }\n}\nt([d()], TextfieldBase.prototype, \"appliedLabel\", 2), t([i({\n  attribute: \"allowed-keys\"\n})], TextfieldBase.prototype, \"allowedKeys\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"focused\", 2), t([b(\".input:not(#sizer)\")], TextfieldBase.prototype, \"inputElement\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"invalid\", 2), t([i()], TextfieldBase.prototype, \"label\", 2), t([i({\n  type: String,\n  reflect: !0\n})], TextfieldBase.prototype, \"name\", 2), t([i()], TextfieldBase.prototype, \"placeholder\", 2), t([d()], TextfieldBase.prototype, \"type\", 1), t([i({\n  attribute: \"type\",\n  reflect: !0\n})], TextfieldBase.prototype, \"_type\", 2), t([i()], TextfieldBase.prototype, \"pattern\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"grows\", 2), t([i({\n  type: Number\n})], TextfieldBase.prototype, \"maxlength\", 2), t([i({\n  type: Number\n})], TextfieldBase.prototype, \"minlength\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"multiline\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"readonly\", 2), t([i({\n  type: Number\n})], TextfieldBase.prototype, \"rows\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"valid\", 2), t([i({\n  type: String\n})], TextfieldBase.prototype, \"value\", 1), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"quiet\", 2), t([i({\n  type: Boolean,\n  reflect: !0\n})], TextfieldBase.prototype, \"required\", 2), t([i({\n  type: String,\n  reflect: !0\n})], TextfieldBase.prototype, \"autocomplete\", 2);\nexport class Textfield extends TextfieldBase {\n  constructor() {\n    super(...arguments);\n    this._value = \"\";\n  }\n  set value(e) {\n    if (e === this.value) return;\n    const n = this._value;\n    this._value = e, this.requestUpdate(\"value\", n);\n  }\n  get value() {\n    return this._value;\n  }\n}\nt([i({\n  type: String\n})], Textfield.prototype, \"value\", 1);","map":null,"metadata":{},"sourceType":"module"}