{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    this._value = nothing;\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n    }\n  }\n  render(value) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return this._value = value;\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    strings.raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: this.constructor.resultType,\n      strings,\n      values: []\n    };\n  }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);","map":{"version":3,"names":["nothing","noChange","directive","Directive","PartType","HTML_RESULT","UnsafeHTMLDirective","constructor","partInfo","_value","type","CHILD","Error","directiveName","render","value","_templateResult","undefined","strings","raw","resultType","values","unsafeHTML"],"sources":["/Users/shivangic/Documents/Github Work/Recommendation-System/node_modules/lit-html/src/directives/unsafe-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`,\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`,\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,OAAO,EAAkBC,QAAQ,QAAO,gBAAgB;AAChE,SAAQC,SAAS,EAAEC,SAAS,EAAYC,QAAQ,QAAO,iBAAiB;AAExE,MAAMC,WAAW,GAAG,CAAC;AAErB,OAAM,MAAOC,mBAAoB,SAAQH,SAAS;EAOhDI,YAAYC,QAAkB;IAC5B,KAAK,CAACA,QAAQ,CAAC;IAJT,KAAAC,MAAM,GAAYT,OAAO;IAK/B,IAAIQ,QAAQ,CAACE,IAAI,KAAKN,QAAQ,CAACO,KAAK,EAAE;MACpC,MAAM,IAAIC,KAAK,CACb,GACG,IAAI,CAACL,WAA0C,CAACM,aACnD,uCAAuC,CACxC;IACH;EACF;EAEAC,MAAMA,CAACC,KAAmE;IACxE,IAAIA,KAAK,KAAKf,OAAO,IAAIe,KAAK,IAAI,IAAI,EAAE;MACtC,IAAI,CAACC,eAAe,GAAGC,SAAS;MAChC,OAAQ,IAAI,CAACR,MAAM,GAAGM,KAAK;IAC7B;IACA,IAAIA,KAAK,KAAKd,QAAQ,EAAE;MACtB,OAAOc,KAAK;IACd;IACA,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;MAC5B,MAAM,IAAIH,KAAK,CACb,GACG,IAAI,CAACL,WAA0C,CAACM,aACnD,mCAAmC,CACpC;IACH;IACA,IAAIE,KAAK,KAAK,IAAI,CAACN,MAAM,EAAE;MACzB,OAAO,IAAI,CAACO,eAAe;IAC7B;IACA,IAAI,CAACP,MAAM,GAAGM,KAAK;IACnB,MAAMG,OAAO,GAAG,CAACH,KAAK,CAAoC;IAC1D;IACCG,OAAe,CAACC,GAAG,GAAGD,OAAO;IAC9B;IACA;IACA,OAAQ,IAAI,CAACF,eAAe,GAAG;MAC7B;MACA;MACA;MACA,CAAC,YAAY,GAAI,IAAI,CAACT,WAA0C,CAC7Da,UAAmB;MACtBF,OAAO;MACPG,MAAM,EAAE;KACT;EACH;;AAlDOf,mBAAA,CAAAO,aAAa,GAAG,YAAY;AAC5BP,mBAAA,CAAAc,UAAU,GAAGf,WAAW;AAoDjC;;;;;;;;;;AAUA,OAAO,MAAMiB,UAAU,GAAGpB,SAAS,CAACI,mBAAmB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}