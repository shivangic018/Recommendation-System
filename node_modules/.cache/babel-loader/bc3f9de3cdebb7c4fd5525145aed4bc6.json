{"ast":null,"code":"\"use strict\";\n\nvar p = Object.defineProperty;\nvar l = Object.getOwnPropertyDescriptor;\nvar o = (s, r, e, t) => {\n  for (var i = t > 1 ? void 0 : t ? l(r, e) : r, n = s.length - 1, a; n >= 0; n--) (a = s[n]) && (i = (t ? a(r, e, i) : a(i)) || i);\n  return t && i && p(r, e, i), i;\n};\nimport { html as c } from \"@spectrum-web-components/base\";\nimport { property as d, query as m } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined as u } from \"@spectrum-web-components/base/src/directives.js\";\nimport { IconsetRegistry as h } from \"@spectrum-web-components/iconset/src/iconset-registry.js\";\nimport { IconBase as v } from \"./IconBase.js\";\nexport class Icon extends v {\n  constructor() {\n    super(...arguments);\n    this.iconsetListener = e => {\n      if (!this.name) return;\n      const t = this.parseIcon(this.name);\n      e.detail.name === t.iconset && (this.updateIconPromise = this.updateIcon());\n    };\n  }\n  connectedCallback() {\n    super.connectedCallback(), window.addEventListener(\"sp-iconset-added\", this.iconsetListener);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback(), window.removeEventListener(\"sp-iconset-added\", this.iconsetListener);\n  }\n  firstUpdated() {\n    this.updateIconPromise = this.updateIcon();\n  }\n  attributeChangedCallback(e, t, i) {\n    super.attributeChangedCallback(e, t, i), this.updateIconPromise = this.updateIcon();\n  }\n  announceIconImageSrcError() {\n    this.dispatchEvent(new Event(\"error\", {\n      cancelable: !1,\n      bubbles: !1,\n      composed: !1\n    }));\n  }\n  render() {\n    return this.name ? c`\n                <div id=\"container\"></div>\n            ` : this.src ? c`\n                <img\n                    src=\"${this.src}\"\n                    alt=${u(this.label)}\n                    @error=${this.announceIconImageSrcError}\n                />\n            ` : super.render();\n  }\n  async updateIcon() {\n    if (this.updateIconPromise && (await this.updateIconPromise), !this.name) return Promise.resolve();\n    const e = this.parseIcon(this.name),\n      t = h.getInstance().getIconset(e.iconset);\n    return !t || !this.iconContainer ? Promise.resolve() : (this.iconContainer.innerHTML = \"\", t.applyIconToElement(this.iconContainer, e.icon, this.size || \"\", this.label ? this.label : \"\"));\n  }\n  parseIcon(e) {\n    const t = e.split(\":\");\n    let i = \"default\",\n      n = e;\n    return t.length > 1 && (i = t[0], n = t[1]), {\n      iconset: i,\n      icon: n\n    };\n  }\n  async getUpdateComplete() {\n    const e = await super.getUpdateComplete();\n    return await this.updateIconPromise, e;\n  }\n}\no([d()], Icon.prototype, \"src\", 2), o([d()], Icon.prototype, \"name\", 2), o([m(\"#container\")], Icon.prototype, \"iconContainer\", 2);","map":null,"metadata":{},"sourceType":"module"}