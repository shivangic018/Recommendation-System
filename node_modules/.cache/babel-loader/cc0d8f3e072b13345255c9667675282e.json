{"ast":null,"code":"import { noChange as r, nothing as e } from \"../lit-html.js\";\nimport { directive as i, Directive as t, PartType as n } from \"../directive.js\";\nimport { isSingleExpression as o, setCommittedValue as s } from \"../directive-helpers.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst l = i(class extends t {\n  constructor(r) {\n    if (super(r), r.type !== n.PROPERTY && r.type !== n.ATTRIBUTE && r.type !== n.BOOLEAN_ATTRIBUTE) throw Error(\"The `live` directive is not allowed on child or event bindings\");\n    if (!o(r)) throw Error(\"`live` bindings can only contain a single expression\");\n  }\n  render(r) {\n    return r;\n  }\n  update(i, [t]) {\n    if (t === r || t === e) return t;\n    const o = i.element,\n      l = i.name;\n    if (i.type === n.PROPERTY) {\n      if (t === o[l]) return r;\n    } else if (i.type === n.BOOLEAN_ATTRIBUTE) {\n      if (!!t === o.hasAttribute(l)) return r;\n    } else if (i.type === n.ATTRIBUTE && o.getAttribute(l) === t + \"\") return r;\n    return s(i), t;\n  }\n});\nexport { l as live };","map":{"version":3,"sources":["../src/directives/live.ts"],"names":["Directive","partInfo","super","type","PartType","PROPERTY","ATTRIBUTE","BOOLEAN_ATTRIBUTE","Error","isSingleExpression","value","part","noChange","nothing","element","name","hasAttribute","getAttribute","String","setCommittedValue","live","directive"],"mappings":";;;;;;;;MA2FaoB,CAAAA,GAAOC,CAAAA,CA3EpB,cAA4BrB,CAAAA;EAC1B,WAAA,CAAYC,CAAAA,EAAAA;IAEV,IADAC,KAAAA,CAAMD,CAAAA,CAAAA,EAGFA,CAAAA,CAASE,IAAAA,KAASC,CAAAA,CAASC,QAAAA,IAC3BJ,CAAAA,CAASE,IAAAA,KAASC,CAAAA,CAASE,SAAAA,IAC3BL,CAAAA,CAASE,IAAAA,KAASC,CAAAA,CAASG,iBAAAA,EAG7B,MAAUC,KAAAA,CACR,gEAAA,CAAA;IAGJ,IAAA,CAAKC,CAAAA,CAAmBR,CAAAA,CAAAA,EACtB,MAAUO,KAAAA,CAAM,sDAAA,CAEnB;EAAA;EAED,MAAA,CAAOE,CAAAA,EAAAA;IACL,OAAOA,CACR;EAAA;EAEQ,MAAA,CAAOC,CAAAA,EAAAA,CAAsBD,CAAAA,CAAAA,EAAAA;IACpC,IAAIA,CAAAA,KAAUE,CAAAA,IAAYF,CAAAA,KAAUG,CAAAA,EAClC,OAAOH,CAAAA;IAET,MAAMI,CAAAA,GAAUH,CAAAA,CAAKG,OAAAA;MACfC,CAAAA,GAAOJ,CAAAA,CAAKI,IAAAA;IAElB,IAAIJ,CAAAA,CAAKR,IAAAA,KAASC,CAAAA,CAASC,QAAAA,EAAAA;MAEzB,IAAIK,CAAAA,KAAWI,CAAAA,CAAgBC,CAAAA,CAAAA,EAC7B,OAAOH,CAAAA;IAAAA,CAAAA,MAEJ,IAAID,CAAAA,CAAKR,IAAAA,KAASC,CAAAA,CAASG,iBAAAA,EAAAA;MAChC,IAAA,CAAA,CAAMG,CAAAA,KAAUI,CAAAA,CAAQE,YAAAA,CAAaD,CAAAA,CAAAA,EACnC,OAAOH,CAAAA;IAAAA,CAAAA,MAEJ,IAAID,CAAAA,CAAKR,IAAAA,KAASC,CAAAA,CAASE,SAAAA,IAC5BQ,CAAAA,CAAQG,YAAAA,CAAaF,CAAAA,CAAAA,KAAiBL,CAAAA,GAAPQ,EAAAA,EACjC,OAAON,CAAAA;IAMX,OADAO,CAAAA,CAAkBR,CAAAA,CAAAA,EACXD,CACR;EAAA;AAAA,CAAA,CAAA;AAAA,SAAA,CAAA,IAAA,IAAA","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {isSingleExpression, setCommittedValue} from '../directive-helpers.js';\n\nclass LiveDirective extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      !(\n        partInfo.type === PartType.PROPERTY ||\n        partInfo.type === PartType.ATTRIBUTE ||\n        partInfo.type === PartType.BOOLEAN_ATTRIBUTE\n      )\n    ) {\n      throw new Error(\n        'The `live` directive is not allowed on child or event bindings',\n      );\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n\n  render(value: unknown) {\n    return value;\n  }\n\n  override update(part: AttributePart, [value]: DirectiveParameters<this>) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === (element as any)[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check against the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {LiveDirective};\n"]},"metadata":{},"sourceType":"module"}