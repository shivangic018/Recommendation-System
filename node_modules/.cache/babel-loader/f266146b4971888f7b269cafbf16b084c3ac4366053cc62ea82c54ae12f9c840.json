{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport function* join(items, joiner) {\n  const isFunction = typeof joiner === 'function';\n  if (items !== undefined) {\n    let i = -1;\n    for (const value of items) {\n      if (i > -1) {\n        yield isFunction ? joiner(i) : joiner;\n      }\n      i++;\n      yield value;\n    }\n  }\n}","map":{"version":3,"names":["join","items","joiner","isFunction","undefined","i","value"],"sources":["/Users/shivangic/Documents/Intern Project/recommendationsystem/node_modules/lit-html/src/directives/join.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Returns an iterable containing the values in `items` interleaved with the\n * `joiner` value.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${join(items, html`<span class=\"separator\">|</span>`)}\n *   `;\n * }\n */\nexport function join<I, J>(\n  items: Iterable<I> | undefined,\n  joiner: (index: number) => J,\n): Iterable<I | J>;\nexport function join<I, J>(\n  items: Iterable<I> | undefined,\n  joiner: J,\n): Iterable<I | J>;\nexport function* join<I, J>(items: Iterable<I> | undefined, joiner: J) {\n  const isFunction = typeof joiner === 'function';\n  if (items !== undefined) {\n    let i = -1;\n    for (const value of items) {\n      if (i > -1) {\n        yield isFunction ? joiner(i) : joiner;\n      }\n      i++;\n      yield value;\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;AA2BA,OAAM,UAAWA,IAAIA,CAAOC,KAA8B,EAAEC,MAAS;EACnE,MAAMC,UAAU,GAAG,OAAOD,MAAM,KAAK,UAAU;EAC/C,IAAID,KAAK,KAAKG,SAAS,EAAE;IACvB,IAAIC,CAAC,GAAG,CAAC,CAAC;IACV,KAAK,MAAMC,KAAK,IAAIL,KAAK,EAAE;MACzB,IAAII,CAAC,GAAG,CAAC,CAAC,EAAE;QACV,MAAMF,UAAU,GAAGD,MAAM,CAACG,CAAC,CAAC,GAAGH,MAAM;MACvC;MACAG,CAAC,EAAE;MACH,MAAMC,KAAK;IACb;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}