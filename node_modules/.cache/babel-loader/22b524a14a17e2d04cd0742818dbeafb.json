{"ast":null,"code":"import { ReactiveElement as t } from \"@lit/reactive-element\";\nexport * from \"@lit/reactive-element\";\nimport { render as e, noChange as i } from \"lit-html\";\nexport * from \"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass s extends t {\n  constructor() {\n    super(...arguments), this.renderOptions = {\n      host: this\n    }, this._$Do = void 0;\n  }\n  createRenderRoot() {\n    const t = super.createRenderRoot();\n    return this.renderOptions.renderBefore ??= t.firstChild, t;\n  }\n  update(t) {\n    const i = this.render();\n    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = e(i, this.renderRoot, this.renderOptions);\n  }\n  connectedCallback() {\n    super.connectedCallback(), this._$Do?.setConnected(!0);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback(), this._$Do?.setConnected(!1);\n  }\n  render() {\n    return i;\n  }\n}\ns._$litElement$ = !0, s[(\"finalized\", \"finalized\")] = !0, globalThis.litElementHydrateSupport?.({\n  LitElement: s\n});\nconst r = globalThis.litElementPolyfillSupport;\nr?.({\n  LitElement: s\n});\nconst o = {\n  _$AK: (t, e, i) => {\n    t._$AK(e, i);\n  },\n  _$AL: t => t._$AL\n};\n(globalThis.litElementVersions ??= []).push(\"4.0.6\");\nexport { s as LitElement, o as _$LE };","map":null,"metadata":{},"sourceType":"module"}