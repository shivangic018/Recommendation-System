{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange, nothing } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nimport { isSingleExpression, setCommittedValue } from '../directive-helpers.js';\nclass LiveDirective extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (!(partInfo.type === PartType.PROPERTY || partInfo.type === PartType.ATTRIBUTE || partInfo.type === PartType.BOOLEAN_ATTRIBUTE)) {\n      throw new Error('The `live` directive is not allowed on child or event bindings');\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n  render(value) {\n    return value;\n  }\n  update(part, [value]) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === element[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check against the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);","map":{"version":3,"names":["noChange","nothing","directive","Directive","PartType","isSingleExpression","setCommittedValue","LiveDirective","constructor","partInfo","type","PROPERTY","ATTRIBUTE","BOOLEAN_ATTRIBUTE","Error","render","value","update","part","element","name","hasAttribute","getAttribute","String","live"],"sources":["/Users/shivangic/Documents/Github Work/Recommendation-System/node_modules/lit-html/src/directives/live.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {isSingleExpression, setCommittedValue} from '../directive-helpers.js';\n\nclass LiveDirective extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      !(\n        partInfo.type === PartType.PROPERTY ||\n        partInfo.type === PartType.ATTRIBUTE ||\n        partInfo.type === PartType.BOOLEAN_ATTRIBUTE\n      )\n    ) {\n      throw new Error(\n        'The `live` directive is not allowed on child or event bindings',\n      );\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n\n  render(value: unknown) {\n    return value;\n  }\n\n  override update(part: AttributePart, [value]: DirectiveParameters<this>) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === (element as any)[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check against the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {LiveDirective};\n"],"mappings":"AAAA;;;;;AAMA,SAAuBA,QAAQ,EAAEC,OAAO,QAAO,gBAAgB;AAC/D,SACEC,SAAS,EACTC,SAAS,EAGTC,QAAQ,QACH,iBAAiB;AACxB,SAAQC,kBAAkB,EAAEC,iBAAiB,QAAO,yBAAyB;AAE7E,MAAMC,aAAc,SAAQJ,SAAS;EACnCK,YAAYC,QAAkB;IAC5B,KAAK,CAACA,QAAQ,CAAC;IACf,IACE,EACEA,QAAQ,CAACC,IAAI,KAAKN,QAAQ,CAACO,QAAQ,IACnCF,QAAQ,CAACC,IAAI,KAAKN,QAAQ,CAACQ,SAAS,IACpCH,QAAQ,CAACC,IAAI,KAAKN,QAAQ,CAACS,iBAAiB,CAC7C,EACD;MACA,MAAM,IAAIC,KAAK,CACb,gEAAgE,CACjE;IACH;IACA,IAAI,CAACT,kBAAkB,CAACI,QAAQ,CAAC,EAAE;MACjC,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;IACzE;EACF;EAEAC,MAAMA,CAACC,KAAc;IACnB,OAAOA,KAAK;EACd;EAESC,MAAMA,CAACC,IAAmB,EAAE,CAACF,KAAK,CAA4B;IACrE,IAAIA,KAAK,KAAKhB,QAAQ,IAAIgB,KAAK,KAAKf,OAAO,EAAE;MAC3C,OAAOe,KAAK;IACd;IACA,MAAMG,OAAO,GAAGD,IAAI,CAACC,OAAO;IAC5B,MAAMC,IAAI,GAAGF,IAAI,CAACE,IAAI;IAEtB,IAAIF,IAAI,CAACR,IAAI,KAAKN,QAAQ,CAACO,QAAQ,EAAE;MACnC;MACA,IAAIK,KAAK,KAAMG,OAAe,CAACC,IAAI,CAAC,EAAE;QACpC,OAAOpB,QAAQ;MACjB;IACF,CAAC,MAAM,IAAIkB,IAAI,CAACR,IAAI,KAAKN,QAAQ,CAACS,iBAAiB,EAAE;MACnD,IAAI,CAAC,CAACG,KAAK,KAAKG,OAAO,CAACE,YAAY,CAACD,IAAI,CAAC,EAAE;QAC1C,OAAOpB,QAAQ;MACjB;IACF,CAAC,MAAM,IAAIkB,IAAI,CAACR,IAAI,KAAKN,QAAQ,CAACQ,SAAS,EAAE;MAC3C,IAAIO,OAAO,CAACG,YAAY,CAACF,IAAI,CAAC,KAAKG,MAAM,CAACP,KAAK,CAAC,EAAE;QAChD,OAAOhB,QAAQ;MACjB;IACF;IACA;IACA;IACAM,iBAAiB,CAACY,IAAI,CAAC;IACvB,OAAOF,KAAK;EACd;;AAGF;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,MAAMQ,IAAI,GAAGtB,SAAS,CAACK,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}