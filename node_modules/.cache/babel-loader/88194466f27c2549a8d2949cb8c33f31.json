{"ast":null,"code":"\"use strict\";\n\nimport { html as s } from \"@spectrum-web-components/base\";\nimport { ifDefined as l } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId as d } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID as n } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(e, {\n    mode: i\n  } = {\n    mode: \"internal\"\n  }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target: e\n    }) => {\n      this.handleHelpText(e), this.handleNegativeHelpText(e);\n    };\n    this.host = e, this.id = `sp-help-text-${n()}`, this.mode = i;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(e) {\n    return s`\n            <div id=${l(this.isInternal ? this.id : void 0)}>\n                <slot\n                    name=${e ? \"negative-help-text\" : `pass-through-help-text-${n()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const e = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = d(this.host, \"aria-describedby\", e), this.host.hasAttribute(\"tabindex\") && (this.previousTabindex = parseFloat(this.host.getAttribute(\"tabindex\"))), this.host.tabIndex = 0;\n  }\n  removeId() {\n    this.conditionId && (this.conditionId(), delete this.conditionId), !this.helpTextElement && (this.previousTabindex ? this.host.tabIndex = this.previousTabindex : this.host.removeAttribute(\"tabindex\"));\n  }\n  handleHelpText(e) {\n    if (this.isInternal) return;\n    this.helpTextElement && this.helpTextElement.id === this.id && this.helpTextElement.removeAttribute(\"id\"), this.removeId();\n    const t = e.assignedElements()[0];\n    this.helpTextElement = t, t && (t.id || (t.id = this.id), this.addId());\n  }\n  handleNegativeHelpText(e) {\n    if (e.name !== \"negative-help-text\") return;\n    e.assignedElements().forEach(t => t.variant = \"negative\");\n  }\n}","map":null,"metadata":{},"sourceType":"module"}