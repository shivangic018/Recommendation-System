{"ast":null,"code":"\"use strict\";\n\nlet i = !0;\ntry {\n  document.body.querySelector(\":focus-visible\");\n} catch (a) {\n  i = !1, import(\"focus-visible\");\n}\nexport const FocusVisiblePolyfillMixin = a => {\n  var s, t;\n  const n = l => {\n      if (l.shadowRoot == null || l.hasAttribute(\"data-js-focus-visible\")) return () => {};\n      if (self.applyFocusVisiblePolyfill) self.applyFocusVisiblePolyfill(l.shadowRoot), l.manageAutoFocus && l.manageAutoFocus();else {\n        const e = () => {\n          self.applyFocusVisiblePolyfill && l.shadowRoot && self.applyFocusVisiblePolyfill(l.shadowRoot), l.manageAutoFocus && l.manageAutoFocus();\n        };\n        return self.addEventListener(\"focus-visible-polyfill-ready\", e, {\n          once: !0\n        }), () => {\n          self.removeEventListener(\"focus-visible-polyfill-ready\", e);\n        };\n      }\n      return () => {};\n    },\n    o = Symbol(\"endPolyfillCoordination\");\n  class c extends (t = a, s = o, t) {\n    constructor() {\n      super(...arguments);\n      this[s] = null;\n    }\n    connectedCallback() {\n      super.connectedCallback && super.connectedCallback(), i || requestAnimationFrame(() => {\n        this[o] == null && (this[o] = n(this));\n      });\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback && super.disconnectedCallback(), i || requestAnimationFrame(() => {\n        this[o] != null && (this[o](), this[o] = null);\n      });\n    }\n  }\n  return c;\n};","map":null,"metadata":{},"sourceType":"module"}