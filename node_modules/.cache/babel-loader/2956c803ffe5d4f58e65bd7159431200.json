{"ast":null,"code":"import { noChange as r, nothing as e } from \"../lit-html.js\";\nimport { directive as i, Directive as t, PartType as n } from \"../directive.js\";\nimport { isSingleExpression as o, setCommittedValue as s } from \"../directive-helpers.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst l = i(class extends t {\n  constructor(r) {\n    if (super(r), r.type !== n.PROPERTY && r.type !== n.ATTRIBUTE && r.type !== n.BOOLEAN_ATTRIBUTE) throw Error(\"The `live` directive is not allowed on child or event bindings\");\n    if (!o(r)) throw Error(\"`live` bindings can only contain a single expression\");\n  }\n  render(r) {\n    return r;\n  }\n  update(i, [t]) {\n    if (t === r || t === e) return t;\n    const o = i.element,\n      l = i.name;\n    if (i.type === n.PROPERTY) {\n      if (t === o[l]) return r;\n    } else if (i.type === n.BOOLEAN_ATTRIBUTE) {\n      if (!!t === o.hasAttribute(l)) return r;\n    } else if (i.type === n.ATTRIBUTE && o.getAttribute(l) === t + \"\") return r;\n    return s(i), t;\n  }\n});\nexport { l as live };","map":null,"metadata":{},"sourceType":"module"}