{"ast":null,"code":"import { desc as t } from \"./base.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nlet e;\nfunction r(r) {\n  return (n, o) => t(n, o, {\n    get() {\n      return (this.renderRoot ?? (e ??= document.createDocumentFragment())).querySelectorAll(r);\n    }\n  });\n}\nexport { r as queryAll };","map":{"version":3,"sources":["../src/decorators/query-all.ts"],"names":["fragment","queryAll","selector","obj","name","desc","this","renderRoot","document","createDocumentFragment","querySelectorAll"],"mappings":";;;;;;AAkCA,IAAIA,CAAAA;AA0BE,SAAUC,CAAAA,CAASC,CAAAA,EAAAA;EACvB,OAAQ,CACNC,CAAAA,EACAC,CAAAA,KAEOC,CAAAA,CAAKF,CAAAA,EAAKC,CAAAA,EAAM;IACrB,GAAA,CAAA,EAAA;MAGE,OAAA,CADEE,IAAAA,CAAKC,UAAAA,KAAeP,CAAAA,KAAaQ,QAAAA,CAASC,sBAAAA,CAAAA,CAAAA,CAAAA,EAC3BC,gBAAAA,CAAiBR,CAAAA,CACnC;IAAA;EAAA,CAAA,CAGP;AAAA;AAAA,SAAA,CAAA,IAAA,QAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAllDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends NodeList>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Shared fragment used to generate empty NodeLists when a render root is\n// undefined\nlet fragment: DocumentFragment;\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string): QueryAllDecorator {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      get(this: ReactiveElement) {\n        const container =\n          this.renderRoot ?? (fragment ??= document.createDocumentFragment());\n        return container.querySelectorAll(selector);\n      },\n    });\n  }) as QueryAllDecorator;\n}\n"]},"metadata":{},"sourceType":"module"}