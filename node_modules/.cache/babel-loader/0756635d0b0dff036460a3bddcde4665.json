{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as e, Directive as r, PartType as s } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst n = \"important\",\n  i = \" !\" + n,\n  o = e(class extends r {\n    constructor(t) {\n      if (super(t), t.type !== s.ATTRIBUTE || \"style\" !== t.name || t.strings?.length > 2) throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\");\n    }\n    render(t) {\n      return Object.keys(t).reduce((e, r) => {\n        const s = t[r];\n        return null == s ? e : e + `${r = r.includes(\"-\") ? r : r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, \"-$&\").toLowerCase()}:${s};`;\n      }, \"\");\n    }\n    update(e, [r]) {\n      const {\n        style: s\n      } = e.element;\n      if (void 0 === this.ft) return this.ft = new Set(Object.keys(r)), this.render(r);\n      for (const t of this.ft) null == r[t] && (this.ft.delete(t), t.includes(\"-\") ? s.removeProperty(t) : s[t] = null);\n      for (const t in r) {\n        const e = r[t];\n        if (null != e) {\n          this.ft.add(t);\n          const r = \"string\" == typeof e && e.endsWith(i);\n          t.includes(\"-\") || r ? s.setProperty(t, r ? e.slice(0, -11) : e, r ? n : \"\") : s[t] = e;\n        }\n      }\n      return t;\n    }\n  });\nexport { o as styleMap };","map":null,"metadata":{},"sourceType":"module"}