{"ast":null,"code":"import { nothing as t, noChange as i } from \"../lit-html.js\";\nimport { Directive as r, PartType as s, directive as n } from \"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass e extends r {\n  constructor(i) {\n    if (super(i), this.it = t, i.type !== s.CHILD) throw Error(this.constructor.directiveName + \"() can only be used in child bindings\");\n  }\n  render(r) {\n    if (r === t || null == r) return this._t = void 0, this.it = r;\n    if (r === i) return r;\n    if (\"string\" != typeof r) throw Error(this.constructor.directiveName + \"() called with a non-string value\");\n    if (r === this.it) return this._t;\n    this.it = r;\n    const s = [r];\n    return s.raw = s, this._t = {\n      _$litType$: this.constructor.resultType,\n      strings: s,\n      values: []\n    };\n  }\n}\ne.directiveName = \"unsafeHTML\", e.resultType = 1;\nconst o = n(e);\nexport { e as UnsafeHTMLDirective, o as unsafeHTML };","map":null,"metadata":{},"sourceType":"module"}