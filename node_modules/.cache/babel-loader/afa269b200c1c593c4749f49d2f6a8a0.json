{"ast":null,"code":"import { nothing as t, noChange as i } from \"../lit-html.js\";\nimport { Directive as r, PartType as s, directive as n } from \"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass e extends r {\n  constructor(i) {\n    if (super(i), this.it = t, i.type !== s.CHILD) throw Error(this.constructor.directiveName + \"() can only be used in child bindings\");\n  }\n  render(r) {\n    if (r === t || null == r) return this._t = void 0, this.it = r;\n    if (r === i) return r;\n    if (\"string\" != typeof r) throw Error(this.constructor.directiveName + \"() called with a non-string value\");\n    if (r === this.it) return this._t;\n    this.it = r;\n    const s = [r];\n    return s.raw = s, this._t = {\n      _$litType$: this.constructor.resultType,\n      strings: s,\n      values: []\n    };\n  }\n}\ne.directiveName = \"unsafeHTML\", e.resultType = 1;\nconst o = n(e);\nexport { e as UnsafeHTMLDirective, o as unsafeHTML };","map":{"version":3,"sources":["../src/directives/unsafe-html.ts"],"names":["UnsafeHTMLDirective","Directive","directiveName","resultType","this","_value","nothing","partInfo","super","type","PartType","CHILD","Error","constructor","value","_templateResult","undefined","noChange","strings","raw","_$litType$","values","unsafeHTML","directive"],"mappings":";;;;;;;AAWM,MAAOA,CAAAA,SAA4BC,CAAAA;EAOvC,WAAA,CAAYM,CAAAA,EAAAA;IAEV,IADAC,KAAAA,CAAMD,CAAAA,CAAAA,EAJAH,IAAAA,CAAMC,EAAAA,GAAYC,CAAAA,EAKpBC,CAAAA,CAASE,IAAAA,KAASC,CAAAA,CAASC,KAAAA,EAC7B,MAAUC,KAAAA,CAELR,IAAAA,CAAKS,WAAAA,CAA2CX,aAAAA,GADnD,uCAAA,CAKL;EAAA;EAED,MAAA,CAAOY,CAAAA,EAAAA;IACL,IAAIA,CAAAA,KAAUR,CAAAA,IAAoB,IAAA,IAATQ,CAAAA,EAEvB,OADAV,IAAAA,CAAKW,EAAAA,GAAAA,KAAkBC,CAAAA,EACfZ,IAAAA,CAAKC,EAAAA,GAASS,CAAAA;IAExB,IAAIA,CAAAA,KAAUG,CAAAA,EACZ,OAAOH,CAAAA;IAET,IAAoB,QAAA,IAAA,OAATA,CAAAA,EACT,MAAUF,KAAAA,CAELR,IAAAA,CAAKS,WAAAA,CAA2CX,aAAAA,GADnD,mCAAA,CAAA;IAKJ,IAAIY,CAAAA,KAAUV,IAAAA,CAAKC,EAAAA,EACjB,OAAOD,IAAAA,CAAKW,EAAAA;IAEdX,IAAAA,CAAKC,EAAAA,GAASS,CAAAA;IACd,MAAMI,CAAAA,GAAU,CAACJ,CAAAA,CAAAA;IAKjB,OAHCI,CAAAA,CAAgBC,GAAAA,GAAMD,CAAAA,EAGfd,IAAAA,CAAKW,EAAAA,GAAkB;MAI7BK,UAAAA,EAAiBhB,IAAAA,CAAKS,WAAAA,CACnBV,UAAAA;MACHe,OAAAA,EAAAA,CAAAA;MACAG,MAAAA,EAAQ;IAAA,CAEX;EAAA;AAAA;AAlDMrB,CAAAA,CAAaE,aAAAA,GAAG,YAAA,EAChBF,CAAAA,CAAUG,UAAAA,GAJC,CAAA;AAAA,MAkEPmB,CAAAA,GAAaC,CAAAA,CAAUvB,CAAAA,CAAAA;AAAAA,SAAAA,CAAAA,IAAAA,mBAAAA,EAAAA,CAAAA,IAAAA,UAAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`,\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`,\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"]},"metadata":{},"sourceType":"module"}