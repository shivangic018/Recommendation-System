{"ast":null,"code":"import { defaultConverter as t, notEqual as e } from \"../reactive-element.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst o = {\n    attribute: !0,\n    type: String,\n    converter: t,\n    reflect: !1,\n    hasChanged: e\n  },\n  r = (t = o, e, r) => {\n    const {\n      kind: n,\n      metadata: i\n    } = r;\n    let s = globalThis.litPropertyMetadata.get(i);\n    if (void 0 === s && globalThis.litPropertyMetadata.set(i, s = new Map()), s.set(r.name, t), \"accessor\" === n) {\n      const {\n        name: o\n      } = r;\n      return {\n        set(r) {\n          const n = e.get.call(this);\n          e.set.call(this, r), this.requestUpdate(o, n, t);\n        },\n        init(e) {\n          return void 0 !== e && this.P(o, void 0, t), e;\n        }\n      };\n    }\n    if (\"setter\" === n) {\n      const {\n        name: o\n      } = r;\n      return function (r) {\n        const n = this[o];\n        e.call(this, r), this.requestUpdate(o, n, t);\n      };\n    }\n    throw Error(\"Unsupported decorator location: \" + n);\n  };\nfunction n(t) {\n  return (e, o) => \"object\" == typeof o ? r(t, e, o) : ((t, e, o) => {\n    const r = e.hasOwnProperty(o);\n    return e.constructor.createProperty(o, r ? {\n      ...t,\n      wrapped: !0\n    } : t), r ? Object.getOwnPropertyDescriptor(e, o) : void 0;\n  })(t, e, o);\n}\nexport { n as property, r as standardProperty };","map":{"version":3,"sources":["../src/decorators/property.ts"],"names":["options","proto","name","hasOwnProperty","constructor","createProperty","wrapped","Object","getOwnPropertyDescriptor","undefined","defaultPropertyDeclaration","attribute","type","String","converter","defaultConverter","reflect","hasChanged","notEqual","standardProperty","target","context","kind","metadata","properties","globalThis","litPropertyMetadata","get","set","Map","v","oldValue","call","this","requestUpdate","_$changeProperty","value","Error","property","protoOrTarget","nameOrContext"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(\n    name,\n    hasOwnProperty ? {...options, wrapped: true} : options\n  );\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}