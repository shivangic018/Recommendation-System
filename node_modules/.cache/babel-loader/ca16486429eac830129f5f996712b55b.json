{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as s, Directive as i, PartType as r } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e = s(class extends i {\n  constructor(t) {\n    if (super(t), t.type !== r.ATTRIBUTE || \"class\" !== t.name || t.strings?.length > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n  }\n  render(t) {\n    return \" \" + Object.keys(t).filter(s => t[s]).join(\" \") + \" \";\n  }\n  update(s, [i]) {\n    if (void 0 === this.st) {\n      this.st = new Set(), void 0 !== s.strings && (this.nt = new Set(s.strings.join(\" \").split(/\\s/).filter(t => \"\" !== t)));\n      for (const t in i) i[t] && !this.nt?.has(t) && this.st.add(t);\n      return this.render(i);\n    }\n    const r = s.element.classList;\n    for (const t of this.st) t in i || (r.remove(t), this.st.delete(t));\n    for (const t in i) {\n      const s = !!i[t];\n      s === this.st.has(t) || this.nt?.has(t) || (s ? (r.add(t), this.st.add(t)) : (r.remove(t), this.st.delete(t)));\n    }\n    return t;\n  }\n});\nexport { e as classMap };","map":null,"metadata":{},"sourceType":"module"}