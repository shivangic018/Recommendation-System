{"ast":null,"code":"import { getCompatibleStyle as t, adoptStyles as s } from \"./css-tag.js\";\nexport { CSSResult, adoptStyles, css, getCompatibleStyle, supportsAdoptingStyleSheets, unsafeCSS } from \"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    is: i,\n    defineProperty: e,\n    getOwnPropertyDescriptor: r,\n    getOwnPropertyNames: h,\n    getOwnPropertySymbols: o,\n    getPrototypeOf: n\n  } = Object,\n  a = globalThis,\n  c = a.trustedTypes,\n  l = c ? c.emptyScript : \"\",\n  p = a.reactiveElementPolyfillSupport,\n  d = (t, s) => t,\n  u = {\n    toAttribute(t, s) {\n      switch (s) {\n        case Boolean:\n          t = t ? l : null;\n          break;\n        case Object:\n        case Array:\n          t = null == t ? t : JSON.stringify(t);\n      }\n      return t;\n    },\n    fromAttribute(t, s) {\n      let i = t;\n      switch (s) {\n        case Boolean:\n          i = null !== t;\n          break;\n        case Number:\n          i = null === t ? null : Number(t);\n          break;\n        case Object:\n        case Array:\n          try {\n            i = JSON.parse(t);\n          } catch (t) {\n            i = null;\n          }\n      }\n      return i;\n    }\n  },\n  f = (t, s) => !i(t, s),\n  y = {\n    attribute: !0,\n    type: String,\n    converter: u,\n    reflect: !1,\n    hasChanged: f\n  };\nSymbol.metadata ??= Symbol(\"metadata\"), a.litPropertyMetadata ??= new WeakMap();\nclass b extends HTMLElement {\n  static addInitializer(t) {\n    this._$Ei(), (this.l ??= []).push(t);\n  }\n  static get observedAttributes() {\n    return this.finalize(), this._$Eh && [...this._$Eh.keys()];\n  }\n  static createProperty(t, s = y) {\n    if (s.state && (s.attribute = !1), this._$Ei(), this.elementProperties.set(t, s), !s.noAccessor) {\n      const i = Symbol(),\n        r = this.getPropertyDescriptor(t, i, s);\n      void 0 !== r && e(this.prototype, t, r);\n    }\n  }\n  static getPropertyDescriptor(t, s, i) {\n    const {\n      get: e,\n      set: h\n    } = r(this.prototype, t) ?? {\n      get() {\n        return this[s];\n      },\n      set(t) {\n        this[s] = t;\n      }\n    };\n    return {\n      get() {\n        return e?.call(this);\n      },\n      set(s) {\n        const r = e?.call(this);\n        h.call(this, s), this.requestUpdate(t, r, i);\n      },\n      configurable: !0,\n      enumerable: !0\n    };\n  }\n  static getPropertyOptions(t) {\n    return this.elementProperties.get(t) ?? y;\n  }\n  static _$Ei() {\n    if (this.hasOwnProperty(d(\"elementProperties\"))) return;\n    const t = n(this);\n    t.finalize(), void 0 !== t.l && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);\n  }\n  static finalize() {\n    if (this.hasOwnProperty(d(\"finalized\"))) return;\n    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(d(\"properties\"))) {\n      const t = this.properties,\n        s = [...h(t), ...o(t)];\n      for (const i of s) this.createProperty(i, t[i]);\n    }\n    const t = this[Symbol.metadata];\n    if (null !== t) {\n      const s = litPropertyMetadata.get(t);\n      if (void 0 !== s) for (const [t, i] of s) this.elementProperties.set(t, i);\n    }\n    this._$Eh = new Map();\n    for (const [t, s] of this.elementProperties) {\n      const i = this._$Eu(t, s);\n      void 0 !== i && this._$Eh.set(i, t);\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n  }\n  static finalizeStyles(s) {\n    const i = [];\n    if (Array.isArray(s)) {\n      const e = new Set(s.flat(1 / 0).reverse());\n      for (const s of e) i.unshift(t(s));\n    } else void 0 !== s && i.push(t(s));\n    return i;\n  }\n  static _$Eu(t, s) {\n    const i = s.attribute;\n    return !1 === i ? void 0 : \"string\" == typeof i ? i : \"string\" == typeof t ? t.toLowerCase() : void 0;\n  }\n  constructor() {\n    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();\n  }\n  _$Ev() {\n    this._$ES = new Promise(t => this.enableUpdating = t), this._$AL = new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach(t => t(this));\n  }\n  addController(t) {\n    (this._$EO ??= new Set()).add(t), void 0 !== this.renderRoot && this.isConnected && t.hostConnected?.();\n  }\n  removeController(t) {\n    this._$EO?.delete(t);\n  }\n  _$E_() {\n    const t = new Map(),\n      s = this.constructor.elementProperties;\n    for (const i of s.keys()) this.hasOwnProperty(i) && (t.set(i, this[i]), delete this[i]);\n    t.size > 0 && (this._$Ep = t);\n  }\n  createRenderRoot() {\n    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n    return s(t, this.constructor.elementStyles), t;\n  }\n  connectedCallback() {\n    this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(!0), this._$EO?.forEach(t => t.hostConnected?.());\n  }\n  enableUpdating(t) {}\n  disconnectedCallback() {\n    this._$EO?.forEach(t => t.hostDisconnected?.());\n  }\n  attributeChangedCallback(t, s, i) {\n    this._$AK(t, i);\n  }\n  _$EC(t, s) {\n    const i = this.constructor.elementProperties.get(t),\n      e = this.constructor._$Eu(t, i);\n    if (void 0 !== e && !0 === i.reflect) {\n      const r = (void 0 !== i.converter?.toAttribute ? i.converter : u).toAttribute(s, i.type);\n      this._$Em = t, null == r ? this.removeAttribute(e) : this.setAttribute(e, r), this._$Em = null;\n    }\n  }\n  _$AK(t, s) {\n    const i = this.constructor,\n      e = i._$Eh.get(t);\n    if (void 0 !== e && this._$Em !== e) {\n      const t = i.getPropertyOptions(e),\n        r = \"function\" == typeof t.converter ? {\n          fromAttribute: t.converter\n        } : void 0 !== t.converter?.fromAttribute ? t.converter : u;\n      this._$Em = e, this[e] = r.fromAttribute(s, t.type), this._$Em = null;\n    }\n  }\n  requestUpdate(t, s, i) {\n    if (void 0 !== t) {\n      if (i ??= this.constructor.getPropertyOptions(t), !(i.hasChanged ?? f)(this[t], s)) return;\n      this.P(t, s, i);\n    }\n    !1 === this.isUpdatePending && (this._$ES = this._$ET());\n  }\n  P(t, s, i) {\n    this._$AL.has(t) || this._$AL.set(t, s), !0 === i.reflect && this._$Em !== t && (this._$Ej ??= new Set()).add(t);\n  }\n  async _$ET() {\n    this.isUpdatePending = !0;\n    try {\n      await this._$ES;\n    } catch (t) {\n      Promise.reject(t);\n    }\n    const t = this.scheduleUpdate();\n    return null != t && (await t), !this.isUpdatePending;\n  }\n  scheduleUpdate() {\n    return this.performUpdate();\n  }\n  performUpdate() {\n    if (!this.isUpdatePending) return;\n    if (!this.hasUpdated) {\n      if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {\n        for (const [t, s] of this._$Ep) this[t] = s;\n        this._$Ep = void 0;\n      }\n      const t = this.constructor.elementProperties;\n      if (t.size > 0) for (const [s, i] of t) !0 !== i.wrapped || this._$AL.has(s) || void 0 === this[s] || this.P(s, this[s], i);\n    }\n    let t = !1;\n    const s = this._$AL;\n    try {\n      t = this.shouldUpdate(s), t ? (this.willUpdate(s), this._$EO?.forEach(t => t.hostUpdate?.()), this.update(s)) : this._$EU();\n    } catch (s) {\n      throw t = !1, this._$EU(), s;\n    }\n    t && this._$AE(s);\n  }\n  willUpdate(t) {}\n  _$AE(t) {\n    this._$EO?.forEach(t => t.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);\n  }\n  _$EU() {\n    this._$AL = new Map(), this.isUpdatePending = !1;\n  }\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  getUpdateComplete() {\n    return this._$ES;\n  }\n  shouldUpdate(t) {\n    return !0;\n  }\n  update(t) {\n    this._$Ej &&= this._$Ej.forEach(t => this._$EC(t, this[t])), this._$EU();\n  }\n  updated(t) {}\n  firstUpdated(t) {}\n}\nb.elementStyles = [], b.shadowRootOptions = {\n  mode: \"open\"\n}, b[d(\"elementProperties\")] = new Map(), b[d(\"finalized\")] = new Map(), p?.({\n  ReactiveElement: b\n}), (a.reactiveElementVersions ??= []).push(\"2.0.4\");\nexport { b as ReactiveElement, u as defaultConverter, f as notEqual };","map":{"version":3,"sources":["src/reactive-element.ts"],"names":["is","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","Object","global","globalThis","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupport","JSCompiler_renameProperty","prop","_obj","defaultConverter","value","type","Boolean","Array","JSON","stringify","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","Symbol","metadata","litPropertyMetadata","WeakMap","ReactiveElement","HTMLElement","addInitializer","initializer","this","__prepare","_initializers","push","elementStyles","observedAttributes","finalize","__attributeToPropertyMap","keys","__instanceProperties","undefined","createProperty","name","options","state","elementProperties","set","noAccessor","key","descriptor","getPropertyDescriptor","prototype","get","v","call","oldValue","requestUpdate","configurable","enumerable","getPropertyOptions","hasOwnProperty","superCtor","Map","finalized","props","properties","propKeys","p","attr","__attributeNameForProperty","finalizeStyles","styles","mode","isArray","Set","flat","Infinity","reverse","s","unshift","getCompatibleStyle","toLowerCase","isUpdatePending","hasUpdated","__reflectingProperty","super","__initialize","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","constructor","forEach","i","controller","__controllers","add","renderRoot","isConnected","hostConnected","delete","instanceProperties","size","shadowRoot","attachShadow","shadowRootOptions","adoptStyles","createRenderRoot","c","_requestedUpdate","hostDisconnected","_old","_$attributeToProperty","toAttribute","attrValue","removeAttribute","setAttribute","ctor","propName","fromAttribute","_$changeProperty","__enqueueUpdate","has","__reflectingProperties","reject","result","scheduleUpdate","performUpdate","wrapped","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","__propertyToAttribute","reactiveElementVersions"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}