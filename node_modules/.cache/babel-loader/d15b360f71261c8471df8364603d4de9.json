{"ast":null,"code":"import { _$LH as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    I: t\n  } = o,\n  i = o => null === o || \"object\" != typeof o && \"function\" != typeof o,\n  n = {\n    HTML: 1,\n    SVG: 2\n  },\n  e = (o, t) => void 0 === t ? void 0 !== o?._$litType$ : o?._$litType$ === t,\n  l = o => null != o?._$litType$?.h,\n  c = o => void 0 !== o?._$litDirective$,\n  d = o => o?._$litDirective$,\n  f = o => void 0 === o.strings,\n  s = () => document.createComment(\"\"),\n  r = (o, i, n) => {\n    const e = o._$AA.parentNode,\n      l = void 0 === i ? o._$AB : i._$AA;\n    if (void 0 === n) {\n      const i = e.insertBefore(s(), l),\n        c = e.insertBefore(s(), l);\n      n = new t(i, c, o, o.options);\n    } else {\n      const t = n._$AB.nextSibling,\n        i = n._$AM,\n        c = i !== o;\n      if (c) {\n        let t;\n        n._$AQ?.(o), n._$AM = o, void 0 !== n._$AP && (t = o._$AU) !== i._$AU && n._$AP(t);\n      }\n      if (t !== l || c) {\n        let o = n._$AA;\n        for (; o !== t;) {\n          const t = o.nextSibling;\n          e.insertBefore(o, l), o = t;\n        }\n      }\n    }\n    return n;\n  },\n  v = (o, t, i = o) => (o._$AI(t, i), o),\n  u = {},\n  m = (o, t = u) => o._$AH = t,\n  p = o => o._$AH,\n  h = o => {\n    o._$AP?.(!1, !0);\n    let t = o._$AA;\n    const i = o._$AB.nextSibling;\n    for (; t !== i;) {\n      const o = t.nextSibling;\n      t.remove(), t = o;\n    }\n  },\n  j = o => {\n    o._$AR();\n  };\nexport { n as TemplateResultType, j as clearPart, p as getCommittedValue, d as getDirectiveClass, r as insertPart, l as isCompiledTemplateResult, c as isDirectiveResult, i as isPrimitive, f as isSingleExpression, e as isTemplateResult, h as removePart, v as setChildPartValue, m as setCommittedValue };","map":{"version":3,"sources":["src/directive-helpers.ts"],"names":["_ChildPart","ChildPart","_$LH","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isCompiledTemplateResult","h","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T,\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType,\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown,\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart,\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options,\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part,\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}